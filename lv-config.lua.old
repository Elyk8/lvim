-- general

O.format_on_save = false
O.lint_on_save = true
O.completion.autocomplete = true
O.completion.source.buffer = false
O.colorscheme = "darkplus"
O.transparent_window = true
O.default_options.relativenumber = true
O.default_options.timeoutlen = 100
O.default_options.ignorecase = true
O.default_options.smartcase = true
O.default_options.foldmethod = "marker"
O.default_options.foldmarker = ">>>>>{,}<<<<<"

-- keymappings

O.keys.leader_key = "space"

vim.cmd([[
nnoremap Y y$

" paste on cursor
nnoremap gP i<CR><Esc>PkJxJx
nnoremap gp a<CR><Esc>PkJxJx

" delete without yanking
"nnoremap <leader>d "_d
"vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap p "_dP
nnoremap gp a<CR><Esc>PkJxJx

" replace exmode with gq
map Q gq

" save keypresses
noremap ; :
nnoremap o o<Esc>
nnoremap O O<Esc>

" autocorrection
inoremap <C-s> <c-g>u<Esc>[s1z=`]a<c-g>u

" accordion expand traversal of folds
nnoremap z] :<C-u>silent! normal! zc<CR>zjzozz 
nnoremap z[ :<C-u>silent! normal! zc<CR>zkzo[zzz
]])

-- Builtin plugins

O.plugin.dashboard.active = true
O.plugin.terminal.active = true
O.plugin.zen.active = false
O.plugin.zen.window.height = 0.90
O.plugin.nvimtree.side = "left"
O.plugin.nvimtree.show_icons.git = 0
O.plugin.nvimtree.hide_dotfiles = 0
O.plugin.terminal.shade_terminals = false

O.vsnip_dir = os.getenv("HOME") .. "/.config/lvim/snippets"

-- if you don't want all the parsers change this to a table of the ones you want
O.treesitter.ensure_installed = { "bash", "lua", "cpp", "c", "latex", "html", "java", "json", "javascript", "bibtex" }
O.treesitter.highlight.enabled = true
O.treesitter.playground.enable = true
O.treesitter.autotag.enable = true

-- python
O.lang.python.diagnostics.virtual_text = true
O.lang.python.analysis.use_library_code_types = true
-- To change default formatter from yapf to black
-- O.lang.python.formatter.exe = "black"
-- O.lang.python.formatter.args = {"-"}
-- To change enabled linters
-- https://github.com/mfussenegger/nvim-lint#available-linters
-- O.lang.python.linters = { "flake8", "pylint", "mypy", ... }

-- javascript
O.lang.tsserver.linter = nil

-- lua
O.lang.lua.formatter.args = { "--config-path " .. os.getenv("HOME") .. "/.config/lvim/.stylua.toml" }

-- clang
O.lang.clang.formatter.args = {
	[[-style="{ BasedOnStyle: Microsoft, IndentWidth: 4, ColumnLimit: 0,
  AlignConsecutiveAssignments: AcrossEmptyLinesAndComments,
  AlignConsecutiveBitFields: AcrossEmptyLinesAndComments }" ]],
}

--LaTeX
-- Options: https://github.com/latex-lsp/texlab/blob/master/docs/options.md
O.lang.latex.active = true
O.lang.latex.aux_directory = "."
O.lang.latex.bibtex_formatter = "texlab"
O.lang.latex.build.args = { "-pdf", "-interaction=nonstopmode", "-synctex=1", "%f" }
O.lang.latex.build.executable = "latexmk"
O.lang.latex.build.forward_search_after = false
O.lang.latex.build.on_save = false
O.lang.latex.chktex.on_edit = false
O.lang.latex.chktex.on_open_and_save = false
O.lang.latex.diagnostics_delay = 300
O.lang.latex.formatter_line_length = 80
O.lang.latex.forward_search.executable = "zathura"
O.lang.latex.latex_formatter = "latexindent"
O.lang.latex.latexindent.modify_line_breaks = false
-- O.lang.latex.auto_save = false
-- O.lang.latex.ignore_errors = { }

-- Additional Plugins
O.user_plugins = {
	{
		"karb94/neoscroll.nvim",
		event = "WinScrolled",
		config = function()
			require("neoscroll").setup({
				-- All these keys will be mapped to their corresponding default scrolling animation
				mappings = { "<C-u>", "<C-d>", "<C-b>", "<C-f>", "<C-y>", "<C-e>", "zt", "zz", "zb", "PageUp" },
				hide_cursor = true, -- Hide cursor while scrolling
				stop_eof = true, -- Stop at <EOF> when scrolling downwards
				use_local_scrolloff = false, -- Use the local scope of scrolloff instead of the global scope
				respect_scrolloff = false, -- Stop scrolling when the cursor reaches the scrolloff margin of the file
				cursor_scrolls_alone = true, -- The cursor will keep on scrolling even if the window cannot scroll further
				easing_function = nil, -- Default easing function
				pre_hook = nil, -- Function to run before the scrolling animation starts
				post_hook = nil, -- Function to run after the scrolling animation ends
			})
		end,
	},
	{
		"ethanholz/nvim-lastplace",
		event = "BufRead",
		config = function()
			require("nvim-lastplace").setup({
				lastplace_ignore_buftype = { "quickfix", "nofile", "help" },
				lastplace_ignore_filetype = {
					"gitcommit",
					"gitrebase",
					"svn",
					"hgcommit",
				},
				lastplace_open_folds = true,
			})
		end,
	},
	{ "lunarvim/colorschemes" },
	{
		"norcalli/nvim-colorizer.lua",
		event = "BufRead",
		config = function()
			require("colorizer").setup({ "*", "!vim" }, {
				RGB = true, -- #RGB hex codes
				RRGGBB = true, -- #RRGGBB hex codes
				RRGGBBAA = true, -- #RRGGBBAA hex codes
				rgb_fn = true, -- CSS rgb() and rgba() functions
				hsl_fn = true, -- CSS hsl() and hsla() functions
				css = true, -- Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB
				css_fn = true, -- Enable all CSS *functions*: rgb_fn, hsl_fn
			})
			vim.cmd("ColorizerReloadAllBuffers")
		end,
	},
	{
		"sindrets/diffview.nvim",
		event = "BufRead",
	},
}

-- Setting for https://github.com/LunarVim/Colorschemes

vim.g.transparent_background = false -- transparent background(Default: false)
vim.g.italic_comments = true -- italic comments(Default: true)
vim.g.italic_keywords = true -- italic keywords(Default: true)
vim.g.italic_functions = true -- italic functions(Default: false)
vim.g.italic_variables = false -- italic variables(Default: false)

-- Autocommands (https://neovim.io/doc/user/autocmd.html)

O.user_autocommands = {
	{ "BufWritePost", "bm-files,bm-dirs", "!shortcuts" },
	{
		"BufRead,BufNewFile",
		"Xresources,Xdefaults,xresources,xdefaults",
		"set filetype=xdefaults",
	},
	{ "BufWritePost", "Xresources,Xdefaults,xresources,xdefaults", "!xrdb %" },
	{
		"BufWritePost",
		"~/.local/src/dwmblocks/config.h",
		"!cd ~/.local/src/dwmblocks/; sudo make install clean && { killall -q dwmblocks; setsid -f dwmblocks }",
	},
	-- { "VimLeavePre", "*.tex", "!texclear %" },
}

-- Additional Leader bindings for WhichKey

O.user_which_key = {
	o = {
		name = "+Scripts",
		c = { [[<cmd>w! | ! compiler %<CR>]], "Compile using compiler" },
		p = { [[<cmd>!opout %<CR><CR>]], "Preview using compiler" },
		s = { [[<cmd>setlocal spell! spelllang=en_au<CR>]], "Toggle spell check" },
	},
}

-- PERSONAL SETTINGS

-- SETTINGS

-- folding options
vim.opt.foldclose = "all"
-- vim.opt.foldcolumn = "1" -- Show the foldcolumn
vim.opt.foldenable = true -- Turn on folding
vim.opt.foldlevel = 0 -- Autofold everything by default
vim.opt.foldnestmax = 1 -- I only like to fold outer functions
vim.opt.foldopen = "all"
